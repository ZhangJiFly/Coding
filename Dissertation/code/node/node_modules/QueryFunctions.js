

module.exports = function(connection){
	pass = require('pwd');
	var updatePassword = function(user, type){
  		if (type){
    		connection.query("UPDATE STAFF\n SET Salt='" + user.Salt + "', Password = '" + user.Password + "'\n WHERE StaffId='" + user.StaffId + "';", function(error, rows, file){
    		if (error) throw error;
    		});
  		}
  		else{
	    connection.query("UPDATE Student\n SET Salt='" + user.Salt + "', Password = '" + user.Password + "'\n WHERE Matric='" + user.Matric + "';", function(error, rows, file){
	    	if (error) throw error;
	    	});
  		}
  	}

	var hash = function(user, type){
	  pass.hash("password", function(err, salt, hash){
	    if (err) throw err;
	        // store the salt & hash in the "db"
	    user.Salt = salt;
	    user.Password = JSON.stringify(hash);
	    updatePassword(user, type);
	  })
	}

	var updateStart = function(){
	  connection.query("SELECT * FROM STUDENT;", function(error, rows, file){
	    for (row in rows){
	      userX = rows[row]
	      hash(userX, 0, pass); 
	    }
	  });
	  connection.query("SELECT * FROM STAFF;", function(error, rows, file){
	    for (row in rows){
	      userY = rows[row]
	      hash(userY, 1); 
	    }
	  });
	}

	var updateCourseList = function(data){
	  var values = [];
	  values.push(data.listName);
	  values.push(data.school);
	  values.push(data.level);
	  connection.query("INSERT INTO Courselist (CourseListId, School, Level) VALUES (?,?,?);",values, function(error, rows, file){
	    if (error) throw error;
	  });
	}

	var updateGroup = function(data){
	  var groupValues = [];
	  var groupCourseValues = []
	  var groups = data.groups;
	  for (var i=0; i<groups.length;i++){
	    groupValues.push([groups[i].credits, data.listName, i])
	    for (var j = 0; j<groups[i].courses.length;j++){
	      groupCourseValues.push([i, data.listName, groups[i].courses[j].CourseId])
	    }
	  }

	  connection.query("INSERT INTO Groups (Credits, CourseListId, GroupId) VALUES (?);",groupValues, function(error, rows, file){
	    if (error) throw error;
	  });

	  connection.query("INSERT INTO GroupHasCourse (GroupId, CourseListId, CourseId) VALUES (?);",groupCourseValues, function(error, rows, file){
	    if (error) throw error;
	  }); 
	}

	var courses = function(matric, callback){
	  connection.query("SELECT Course.CourseID, Course.Name, Course.Credit, StudentHasCourse.Grade, StudentHasCourse.Status FROM Course INNER JOIN StudentHasCourse ON Course.CourseId = StudentHasCourse.CourseId WHERE StudentHasCourse.StudentMatric = ?", matric, function(error, rows, file){
	    callback(rows);
	  });
	}   

	var advisees = function(StaffId, callback){
	  connection.query("SELECT Student.Forename, Student.Matric, Student.Degree, Student.Year FROM Student WHERE Student.StaffId = ?", StaffId, function(error, rows, file){
	    callback(rows);
	  });
	} 

	var degrees = function(school, callback){
	  connection.query("SELECT Degree.Name FROM Degree WHERE Degree.School = ?", school, function(error, rows, file){
	    callback(rows);
	  });
	}  

	var singleDegree = function(degree, callback){
	  connection.query("SELECT * FROM Degree WHERE Degree.Name = ?", degree, function(error, rows, file){
	    callback(rows);
	  });
	} 

	var courseLists = function(school, callback){
	 	connection.query("SELECT * FROM CourseList WHERE School = ?", school, function(error, rows, file){
	    if (error) throw error;
	    callback(rows);
	  });
	}   

	var degreeCourseLists = function(degree, callback){
	  connection.query("SELECT * FROM DegreeHasCourseList WHERE Degree = ?", degree, function(error, rows, file){
	     if (error) throw error;
	    callback(rows);
	  });
	} 

	var getSchoolCourses = function(school, callback){
	  connection.query("Select * FROM Course WHERE Course.School = ?;", school, function(error, rows, file){
	    if (error) throw error;
	    callback(rows);
	    });
	} 
	return {getSchoolCourse: getSchoolCourses, degreeCourseLists: degreeCourseLists, courseLists: courseLists, singleDegree: singleDegree, degrees: degrees, advisees: advisees, courses: courses, updateGroup: updateGroup, updateCourseList: updateCourseList, updateStart: updateStart};
}