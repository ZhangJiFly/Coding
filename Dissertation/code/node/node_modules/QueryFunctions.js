

module.exports = function(connection){
	pass = require('pwd');
	var updatePassword = function(user, type){
  		if (type){
    		connection.query("UPDATE STAFF\n SET Salt='" + user.Salt + "', Password = '" + user.Password + "'\n WHERE StaffId='" + user.StaffId + "';", function(error, rows, file){
    		if (error) throw error;
    		});
  		}
  		else{
	    connection.query("UPDATE Student\n SET Salt='" + user.Salt + "', Password = '" + user.Password + "'\n WHERE Matric='" + user.Matric + "';", function(error, rows, file){
	    	if (error) throw error;
	    	});
  		}
  	}

	var hash = function(user, type){
	  pass.hash("password", function(error, salt, hash){
	    if (error) throw err;
	        // store the salt & hash in the "db"
	    user.Salt = salt;
	    user.Password = JSON.stringify(hash);
	    updatePassword(user, type);
	  })
	}

	var updateStart = function(){
	  connection.query("SELECT * FROM STUDENT;", function(error, rows, file){
	    for (row in rows){
	      userX = rows[row]
	      hash(userX, 0, pass); 
	    }
	  });
	  connection.query("SELECT * FROM STAFF;", function(error, rows, file){
	    for (row in rows){
	      userY = rows[row]
	      hash(userY, 1); 
	    }
	  });
	}

	var getAdvisor = function(StaffId, callback){
		connection.query("SELECT * FROM Staff WHERE StaffId= ?", StaffId, function(error, rows, file){
			if (error) throw err;
			callback(rows);
		});
	}

	var updateCourseList = function(data){
	  var values = [];
	  values.push(data.listName);
	  values.push(data.school);
	  values.push(data.level);
	  connection.query("INSERT INTO Courselist (CourseListId, School, Level) VALUES (?,?,?);",values, function(error, insertId){
	    if (error) throw error;
	  });
	}

	var updateCoursesTaken = function(matric, courseId, callback){
	  connection.query("INSERT INTO StudentHasCourse (Matric, CourseId) VALUES (?,?);",[matric, courseId], function(error, insertId){
	    if (error) throw error;
	  });
	  callback(200);
	}

	var createSQL = function(values, start){
		var SQL = start;
		console.log(values.length);
	  	for (var i =0;i<values.length;i++){
	  		SQL = SQL.concat('(?)');
	  		if (i+1 != values.length){
	  			SQL = SQL.concat(',');
	  		}
	  		else{
	  			SQL = SQL.concat(";");
	  		}
	  	}
	  	return SQL;
	}

	var updateGroup = function(data){
		var groupValues = [];
		var groupCourseValues = []
		var groups = data.groups;
		for (var i=0; i<groups.length;i++){
			groupValues.push([groups[i].min,groups[i].max , data.listName, i])
			for (var j = 0; j<groups[i].courses.length;j++){
			  groupCourseValues.push([i, data.listName, groups[i].courses[j].CourseId])
			}
		}
	 	var SQL = createSQL(groupValues, "INSERT INTO Groups (Minimum, Maximum, CourseListId, GroupId) VALUES ");
		var thisQ = connection.query(SQL,groupValues, function(error, rows, file){
			if (error) throw error;
		});
		SQL = createSQL(groupCourseValues, "INSERT INTO GroupHasCourse (GroupId, CourseListId, CourseId) VALUES ");
		console.log(thisQ);
		thisQ = connection.query(SQL,groupCourseValues, function(error, rows, file){
			if (error) throw error;
		}); 
		console.log(thisQ);
	}

	var courses = function(matric, callback){
	  connection.query("SELECT Course.CourseID, Course.Name, Course.Minimum,Course.Maximum, StudentHasCourse.Grade, StudentHasCourse.Status FROM Course INNER JOIN StudentHasCourse ON Course.CourseId = StudentHasCourse.CourseId WHERE StudentHasCourse.StudentMatric = ?", matric, function(error, rows, file){
	    callback(rows);
	  });
	}   

	var advisees = function(StaffId, callback){
	  connection.query("SELECT Student.Forename, Student.Matric, Student.Degree, Student.Year FROM Student WHERE Student.StaffId = ?", StaffId, function(error, rows, file){
	    callback(rows);
	  });
	} 

	var degrees = function(school, callback){
	  connection.query("SELECT Degree.Name FROM Degree WHERE Degree.School = ?", school, function(error, rows, file){
	    callback(rows);
	  });
	}  

	var singleDegree = function(degree, callback){
	  connection.query("SELECT * FROM Degree WHERE Degree.Name = ?", degree, function(error, rows, file){
	    callback(rows);
	  });
	} 

	var getStudentCourses = function(matric, callback){
	  connection.query("SELECT * FROM StudentHasCourse WHERE StudentHasCourse.Matric = ?", matric, function(error, rows, file){
	    callback(rows);
	  });
	} 

	var courseLists = function(school, callback){
	 	connection.query("SELECT * FROM CourseList WHERE School = ?", school, function(error, rows, file){
	    if (error) throw error;
	    callback(rows);
	  });
	}   

	var degreeCourseLists = function(degree, callback){
	  connection.query("SELECT * FROM DegreeHasCourseList WHERE Degree = ?", degree, function(error, rows, file){
	     if (error) throw error;
	    callback(rows);
	  });
	} 

	var getSchoolCourses = function(school, callback){
	  connection.query("Select * FROM Course WHERE Course.School = ?;", school, function(error, rows, file){
	    if (error) throw error;
	    callback(rows);
	    });
	} 

	var validUser = function(name, type, callback){
		connection.query("SELECT * FROM " + type + "\n WHERE Username= ?", name, function(error, rows, file){
			if (error) throw error;
	    	callback(error, rows, file);
		});
	}

	var updateDegreeCourseLists = function(degree, school, year, courseList){
		var query1 = connection.query("INSERT INTO DegreeHasCourseList (Degree, CourseListId, Year, School) VALUES (?,?,?,?) ON DUPLICATE KEY UPDATE CourseListId=?;", [degree, courseList, year, school, courseList], function(error, rows, file){
			if (error) throw error;
		});
	}

	var degreeCourseListsTotal = function(degree, callback){
	connection.query("SELECT Groups.GroupId,Minimum, Maximum, Groups.CourseListId, GroupHasCourse.CourseId, Course.Name, Course.Level, Course.Credit FROM Course, Groups INNER JOIN GroupHasCourse ON Groups.CourseListId = GroupHasCourse.CourseListId AND Groups.GroupId = GroupHasCourse.GroupId WHERE GroupHasCourse.CourseId = Course.CourseId AND Groups.CourseListId IN (SELECT CourseListId FROM DegreeHasCourseList WHERE Degree = ?);", degree, function(error, rows, file){
		if (error) throw error;
		var info = {};
		for (var i = 0; i<rows.length; i++){
			var courseListId = rows[i].CourseListId;
			var groupNum = rows[i].GroupId;
			var courseInfo = {CourseId: rows[i].CourseId, Name: rows[i].Name, Level: rows[i].Level, Credit: rows[i].Credit}

			if(info[courseListId] == undefined){
				info[courseListId] = {};
				info[courseListId][groupNum] = [courseInfo];
			}
			else if(info[courseListId][groupNum] == undefined){
				info[courseListId][groupNum] = [courseInfo]
			}
			else{
				info[courseListId][groupNum].push(courseInfo);
			}
		}
    	callback(info);
	});
	}


	var getCourseListsInfo = function(callback){
		connection.query("Select Groups.GroupId,Minimum, Maximum, Groups.CourseListId, GroupHasCourse.CourseId, Course.Name, Course.Level, Course.Credit from Course, Groups INNER JOIN GroupHasCourse on Groups.CourseListId = GroupHasCourse.CourseListId AND Groups.GroupId = GroupHasCourse.GroupId WHERE GroupHasCourse.CourseId = Course.CourseId", function(error, rows, file){
			if (error) throw error;
			var info = {};
			for (var i = 0; i<rows.length; i++){
				var courseListId = rows[i].CourseListId;
				var groupNum = rows[i].GroupId;
				var courseInfo = {CourseId: rows[i].CourseId, Name: rows[i].Name, Level: rows[i].Level, Credit: rows[i].Credit}
				if(info[courseListId] == undefined){
					info[courseListId] = {};
					info[courseListId][groupNum] = [courseInfo];
				}
				else if(info[courseListId][groupNum] == undefined){
					info[courseListId][groupNum] = [courseInfo]
				}
				else{
					info[courseListId][groupNum].push(courseInfo);
				}
			}
	    	callback(info);
		});
	}
	return {updateCoursesTaken:updateCoursesTaken,getStudentCourses:getStudentCourses, getAdvisor:getAdvisor, getSchoolCourses: getSchoolCourses, degreeCourseLists: degreeCourseLists, courseLists: courseLists, singleDegree: singleDegree, degrees: degrees, advisees: advisees, courses: courses, updateGroup: updateGroup, updateCourseList: updateCourseList, updateStart: updateStart, validUser:validUser, getCourseListsInfo:getCourseListsInfo, updateDegreeCourseLists:updateDegreeCourseLists, degreeCourseListsTotal:degreeCourseListsTotal};
}