import java.io.File;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.regex.*;


public class fileCrawler {



	public void processDirectory(String name, ConcurrentLinkedQueue<String> CLQ, String pat, PriorityBlockingQueue<String> PBQ) {
		try {

			File file = new File(name);	// create a File object

			if (file.isDirectory()) {	// a directory - could be symlink
				System.out.println("check1");
				CLQ.add(name);
				String entries[] = file.list();
				if (entries != null) {	// not a symlink;
				}
				for (String entry : entries ) {
					if (entry.compareTo(".") == 0)
						continue;
					if (entry.compareTo("..") == 0)
						continue;
					//System.out.println("check2");
					processDirectory(name+"/"+entry, CLQ, pat, PBQ);
				}

			}
			else {
				System.out.println("check3");
				String pattern = Regex.cvtPattern(pat);
				Pattern p = Pattern.compile(pattern);
				Matcher m = p.matcher(name);
				if (m.matches()){
					System.out.println("check4");
					PBQ.add(name);
				}
			}


		}
		catch (Exception e) {
			System.err.println("Error processing "+ name +": "+e);
		}
	}



	public static void main( String Arg[] ){
		String fileName = Arg[1];
		fileCrawler FC = new fileCrawler();
		if (fileName.charAt(fileName.length()-1)== ']'){
			fileName = fileName.substring(0, fileName.length()-2);
		}
		if (fileName.charAt(0)== '['){
			fileName = fileName.substring(1);
		}

		PriorityBlockingQueue<String> PBQ = new PriorityBlockingQueue<String>();
		ConcurrentLinkedQueue<String> CLQ = new ConcurrentLinkedQueue<String>();
		FC.processDirectory(fileName, CLQ, Arg[0], PBQ);

		while (!PBQ.isEmpty()){
			//System.out.println("check");
			System.out.println(PBQ.poll());
		}
	}



}


