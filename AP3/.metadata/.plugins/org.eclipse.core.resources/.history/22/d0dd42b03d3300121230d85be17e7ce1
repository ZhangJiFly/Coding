import java.io.File;
import java.io.IOException;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ConcurrentSkipListSet;
import java.util.regex.*;


public class fileCrawler {

	public static class worker implements Runnable{
		private Pattern p;
		private ConcurrentSkipListSet<String> CSLS;
		private LinkedBlockingQueue<String> LBQ;
		
		worker(Pattern pat, ConcurrentSkipListSet<String> CSLS, LinkedBlockingQueue<String> LBQ) 
		{
			this.p  = pat;
			this.CSLS = CSLS;
			this.LBQ = LBQ;
		}

		@SuppressWarnings("null")
		public void run ( ) {
			File file = null;
			System.out.println("Worker Activated");
			try {
				file = new File(LBQ.take());
			} catch (InterruptedException e) {
				System.err.println("Error processing "+ file.getName() +": "+e);
				e.printStackTrace();
			}
			String entries[] = file.list();
		
			for (String entry : entries ) {
				File subFile = new File(entry);
				System.out.println(subFile.getName() + " " + !subFile.isDirectory() + " " + entry);
				if (!subFile.isDirectory()) {
					System.out.println("file Found!");
					System.out.println(entry);
					Matcher m = p.matcher(entry);
					if (m.matches()){
						CSLS.add(file + "/" + entry);
					}
				}

			}
		}
	}


	public static String cvtPattern(String str) {
		StringBuilder pat = new StringBuilder();
		int start, length;

		pat.append('^');
		if (str.charAt(0) == '\'') {	// double quoting on Windows
			start = 1;
			length = str.length() - 1;
		} else {
			start = 0;
			length = str.length();
		}
		for (int i = start; i < length; i++) {
			switch(str.charAt(i)) {
			case '*': pat.append('.'); pat.append('*'); break;
			case '.': pat.append('\\'); pat.append('.'); break;
			case '?': pat.append('.'); break;
			default:  pat.append(str.charAt(i)); break;
			}
		}
		pat.append('$');
		return new String(pat);
	}


	public void processDirectory(String name, LinkedBlockingQueue<String> LBQ) {
		try {

			File file = new File(name);	// create a File object

			if (file.isDirectory()) {	// a directory - could be symlink
				LBQ.add(name);
				String entries[] = file.list();
				if (entries != null) {	// not a symlink;
				}
				for (String entry : entries ) {
					if (entry.compareTo(".") == 0)
						continue;
					if (entry.compareTo("..") == 0)
						continue;

					processDirectory(name+"/"+entry, LBQ);
				}
			}
		}
		catch (Exception e) {
			System.err.println("Error processing "+ name +": "+e);
		}
	}

	/*public void processFile(String name, String pat, ConcurrentSkipListSet<String> CSLS){
			try {

				File file = new File(name);	// create a File object
				if (!file.isDirectory()) {	// a directory - could be symlink
					String pattern = Regex.cvtPattern(pat);
					Pattern p = Pattern.compile(pattern);
					Matcher m = p.matcher(name);
					if (m.matches()){

						CSLS.add(name);
					}
				}

			}
			catch (Exception e) {
				System.err.println("Error processing "+ name +": "+e);
			}
		}*/

	public static void main( String Arg[] ) throws IOException{
		String fileName = Arg[1];
		fileCrawler FC = new fileCrawler();
		int noThreads = 2;
		ConcurrentSkipListSet<String> CSLS = new ConcurrentSkipListSet<String>();
		LinkedBlockingQueue<String> LBQ = new LinkedBlockingQueue<String>();
		if ((System.getenv("CRAWLER_THREADS") != null)){
			noThreads = Integer.parseInt(System.getenv("CRAWLER_THREADS"));
		}
		
		Thread workers[] = new Thread[noThreads];
		
		String pattern = cvtPattern(Arg[0]);
		Pattern p = Pattern.compile(pattern);
		
		worker wt = new worker(p, CSLS, LBQ);
		
		for (int i = 0;i<workers.length;i++){
			
			workers[i] = new Thread(wt);
			workers[i].start();
		}
		if (Arg.length == 1){
			FC.processDirectory(".", LBQ);
		}
		else {
			for (int i = 1; i<Arg.length; i++)
			FC.processDirectory(Arg[i], LBQ);
		}
		while (!LBQ.isEmpty()){
			System.out.println( LBQ.poll() );
		}
		
		for (Thread t : workers){
			t.interrupt();
		}
		for (Thread k : workers){
			try {
				k.join();
			}
			catch(Exception e){
			}
		}
		
		while (!CSLS.isEmpty()){
			System.out.println(CSLS.pollFirst());
		}
	}



}


